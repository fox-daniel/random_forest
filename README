# random_forest

random_forest is a python module for training and predicting with a random forest on data with float features and binary labels (0 or 1).

## Features

* Train a random forest
* Predict with a random forest
* Print the trees of the forest

## Data Structure

* A random forest is a list of decision trees
* Trees are defined by lists of nodes. These are all terminal nodes. Internal nodes are not saved.
* Each node is a tuple, (path, loss, predict, num):
    * path: a list that defines the region of the node, using the data structure: 
        * [(feature_column_ind, value, orientation),...] where
            * feature_column_ind: the index of a column of the array or dataframe
            * value: the value at which the split of the region is made
            * orientation: 'upper' (>) or 'lower' (<=) 
    * loss: the value of the loss function for the region defined by the path
    * predict: the class prediction for the region defined by the path
    * num: number of training points in the node 
    

## Installation

Save the following modules into your working directory:
* decision_tree.py
* random_forest.py
* evaluation.py
* data_for_tests.py

## Usage

Run the following code in a python script using your own data:
```
import decision_tree
import random_forest

X = <your data: numpy array of features>
y = <your data: numpy array of labels (0 or 1)>

forest = grow_random_forest(X, y)

X' = <your data: numpy array of features of other data>
predictions = forest_predict(X')
```

Run the example script:
```
$python random_forest_example.py
```
It trains and evaluates a random forest model on synthetic data and reports the results.

The function grow_random_forest() accepts the following arguments (default values listed):

* X -- numpy array of features (floats)
* y -- numpy array of labels (ints: 0 or 1)
* num_trees=10,
* max_features="sqrt",
* max_depth=5,
* min_node_size=5,
* max_samples=None,
* bootstrap=True,
* min_loss=0.056,
* print_progress=False,


## Contributing

## License
